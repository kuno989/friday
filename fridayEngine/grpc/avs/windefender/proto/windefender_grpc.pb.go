// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package windefender_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WinDefenderScannerClient is the client API for WinDefenderScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WinDefenderScannerClient interface {
	ScanFile(ctx context.Context, in *ScanFileRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type winDefenderScannerClient struct {
	cc grpc.ClientConnInterface
}

func NewWinDefenderScannerClient(cc grpc.ClientConnInterface) WinDefenderScannerClient {
	return &winDefenderScannerClient{cc}
}

func (c *winDefenderScannerClient) ScanFile(ctx context.Context, in *ScanFileRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/windefender.WinDefenderScanner/ScanFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *winDefenderScannerClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/windefender.WinDefenderScanner/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WinDefenderScannerServer is the server API for WinDefenderScanner service.
// All implementations must embed UnimplementedWinDefenderScannerServer
// for forward compatibility
type WinDefenderScannerServer interface {
	ScanFile(context.Context, *ScanFileRequest) (*ScanResponse, error)
	GetVersion(context.Context, *VersionRequest) (*VersionResponse, error)
	mustEmbedUnimplementedWinDefenderScannerServer()
}

// UnimplementedWinDefenderScannerServer must be embedded to have forward compatible implementations.
type UnimplementedWinDefenderScannerServer struct {
}

func (UnimplementedWinDefenderScannerServer) ScanFile(context.Context, *ScanFileRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanFile not implemented")
}
func (UnimplementedWinDefenderScannerServer) GetVersion(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedWinDefenderScannerServer) mustEmbedUnimplementedWinDefenderScannerServer() {}

// UnsafeWinDefenderScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WinDefenderScannerServer will
// result in compilation errors.
type UnsafeWinDefenderScannerServer interface {
	mustEmbedUnimplementedWinDefenderScannerServer()
}

func RegisterWinDefenderScannerServer(s grpc.ServiceRegistrar, srv WinDefenderScannerServer) {
	s.RegisterService(&WinDefenderScanner_ServiceDesc, srv)
}

func _WinDefenderScanner_ScanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WinDefenderScannerServer).ScanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/windefender.WinDefenderScanner/ScanFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WinDefenderScannerServer).ScanFile(ctx, req.(*ScanFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WinDefenderScanner_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WinDefenderScannerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/windefender.WinDefenderScanner/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WinDefenderScannerServer).GetVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WinDefenderScanner_ServiceDesc is the grpc.ServiceDesc for WinDefenderScanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WinDefenderScanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "windefender.WinDefenderScanner",
	HandlerType: (*WinDefenderScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanFile",
			Handler:    _WinDefenderScanner_ScanFile_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _WinDefenderScanner_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "windefender.proto",
}
